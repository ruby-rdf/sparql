##
# fn:matches(STRING, PATTERN)
# fn:matches(STRING, PATTERN, FLAGS)
#
# @see http://www.w3.org/TR/sparql11-query/#OperatorMapping
# @see http://www.w3.org/TR/xpath-functions/#func-matches

# @see http://www.w3.org/TR/sparql11-query/#restrictString
(equal (regex "SPARQL Tutorial" "^SPARQL" "")                   true)
(equal (regex "The Semantic Web" "^SPARQL" "")                  false)
(equal (regex "SPARQL Tutorial" "web" "i")                      false)
(equal (regex "The Semantic Web" "web" "i"  )                   true)

# @see http://www.w3.org/TR/sparql11-query/#func-str
(equal (regex "<mailto:alice@work.example>" "@work.example" "") true)
(equal (regex "<mailto:bob@home.example>" "@work.example" "")   false)

# @see http://www.w3.org/TR/sparql11-query/#funcex-regex
(equal (regex "Alice" "^ali" "i")                               true)
(equal (regex "Bob" "^ali" "i")                                 false)

# @see http://www.w3.org/TR/xpath-functions/#func-matches
(equal (regex "abracadabra" "bra" "")                           true)
(equal (regex "abracadabra" "^a.*a$" "")                        true)
(equal (regex "abracadabra" "^bra" "")                          false)

# @see http://www.w3.org/TR/xpath-functions/#flags
(equal (regex "helloworld" "hello world" "x")                   true)
(equal (regex "helloworld" "hello[ ]world" "x")                 false)
(equal (regex "hello world" "hello\\sworld" "x")                true)
(equal (regex "hello world" "hello world" "x")                  false)

(equal (regex "ac"            "a?+*.{}()[]c" "q")               false)
(equal (regex "abc"           "a?+*.{}()[]c" "q")               false)
(equal (regex "abbbc"         "a?+*.{}()[]c" "q")               false)
(equal (regex "a\nc"          "a?+*.{}()[]c" "q")               false)
(equal (regex "a\nb\nc"       "a?+*.{}()[]c" "q")               false)
(equal (regex "a.c"           "a?+*.{}()[]c" "q")               false)
(equal (regex "ABC"           "a?+*.{}()[]c" "q")               false)
(equal (regex "a?+*.{}()[]c"  "a?+*.{}()[]c" "q")               true)
(equal (regex "b"             "a?+*.{}()[]c" "q")               false)
(equal (regex "abcd"          ".*" "q")                         false)
(equal (regex "Mr. B. Obama"  "B. OBAMA" "iq")                  true)

(error (regex _:a _:b _:c) TypeError)
(error (regex <mailto:alice@example.org> "example" "") TypeError)
