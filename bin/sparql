#!/usr/bin/env ruby
require 'rubygems'
$:.unshift("../../lib", __FILE__)
require 'logger'
require 'sparql'
require 'rack'
require 'rackup'
begin
  require 'linkeddata'
rescue LoadError
  require 'rdf/ntriples'
end
require 'getoptlong'

def display_results(res, **options)
  puts res.inspect if options[:verbose]
  puts case res
  when RDF::Graph   then res.dump(options.fetch(:format, :ttl), base_uri: query.base_uri, prefixes: query.prefixes, standard_prefixes: true)
  when RDF::Literal then res.inspect
  else
    case options[:format]
    when :json then res.to_json
    when :html  then res.to_html
    when :xml  then res.to_xml
    when :csv  then res.to_csv
    when :tsv  then res.to_tsv
    else            res.map {|s| s.bindings.map {|k,v| "#{k}: #{v}"}}.join("\n")
    end
  end
end

def run(input, **options)
  if options[:debug]
    puts "input graph:\n#{options[:dataset].dump(:trig, standard_prefixes: true)}\n" if options[:dataset]
    puts "query:\n#{input}\n"
  end
  options[:dataset] ||= RDF::Repository.new

  if options[:verbose]
    puts ("\nSPARQL:\n" + input) 
  end

  query = if options[:sse]
    SPARQL::Algebra.parse(input, logger: options[:logger], update: options[:update])
  else
    # Only do grammar debugging if we're generating SSE
    SPARQL::Grammar.parse(input, **options)
  end

  query = query.optimize if options[:optimize]

  puts ("\nSSE:\n" + query.to_sse) if options[:debug]

  if options[:parse_only]
    case options[:format]
    when :sparql
      puts ("\nSPARQL:\n" + query.to_sparql)
    when nil, :sse
      puts ("\nSSE:\n" + query.to_sse)
    else
      $stderr.puts "Unknown output format for parsing: #{options[:format]}. Use 'sse' or 'sparql'"
    end
  else
    res = query.execute(options[:dataset], logger: options[:logger])
    display_results(res, **options)
  end
end

def server(options)
  app = SPARQL::Server.application(**options)
  Rackup::Server.start(app: app, Port: options.fetch(:port, 9292))
rescue LoadError
  $stderr.puts "Running SPARQL server requires Rack, Rackup, and Sinatra to be in environment: #{$!.message}"
end

cmd, input = ARGV.shift, nil

OPT_ARGS = [
  ["--dataset", GetoptLong::REQUIRED_ARGUMENT, "File containing RDF graph or dataset"],
  ["--debug", GetoptLong::NO_ARGUMENT, "Debugging output"],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT, "Run against source in argument"],
  ["--format", GetoptLong::REQUIRED_ARGUMENT, "Output format for results (json, xml, csv, tsv, html, sparql, sse, or another RDF format)"],
  ["--help", "-?", GetoptLong::NO_ARGUMENT, "print this message"],
  ["--optimize", GetoptLong::NO_ARGUMENT, "Perform query optimizations"],
  ["--port", "-p", GetoptLong::REQUIRED_ARGUMENT, "Port on which to run server; defaults to 9292"],
  ["--sse", GetoptLong::NO_ARGUMENT, "Query input is in SSE format"],
  ["--update", GetoptLong::NO_ARGUMENT, "Process query as a SPARQL Update"],
  ["--verbose", GetoptLong::NO_ARGUMENT, "Verbose output"],
]

def usage
  puts "Usage: #{File.basename($0)} execute [options] query-file         Execute a query against the specified dataset"
  puts "       #{File.basename($0)} parse [options] query-file           Parse a query into SPARQL S-Expressions (SSE)"
  puts "       #{File.basename($0)} query [options] end-point query-file Run the query against a remote end-point"
  puts "       #{File.basename($0)} server [options] dataset-file        Start a server initialized from the specified dataset"
  puts "Options:"
  width = OPT_ARGS.map do |o|
    l = o.first.length
    l += o[1].length + 2 if o[1].is_a?(String)
    l
  end.max
  OPT_ARGS.each do |o|
    s = "  %-*s  " % [width, (o[1].is_a?(String) ? "#{o[0,2].join(', ')}" : o[0])]
    s += o.last
    puts s
  end
  exit(0)
end

opts = GetoptLong.new(*OPT_ARGS.map {|o| o[0..-2]})

logger = Logger.new(STDERR)
logger.level = Logger::WARN
logger.formatter = lambda {|severity, datetime, progname, msg| "%5s %s\n" % [severity, msg]}

options = {
  dataset: RDF::Repository.new,
  logger: logger,
}

opts.each do |opt, arg|
  case opt
  when '--dataset'       then options[:dataset].load(arg, rdfstar: true)
  when '--debug'         then options[:debug] = true ; logger.level = Logger::DEBUG
  when '--execute'       then input = arg
  when '--format'        then options[:format] = arg.to_sym
  when '--optimize'      then options[:optimize] = true
  when '--port'          then options[:port] = arg.to_i
  when '--sse'           then options[:sse] = true
  when '--update'        then options[:update] = true
  when '--verbose'       then options[:verbose] = true ; logger.level = Logger::INFO
  when "--help"          then usage
  end
end

unless %w(execute query parse server help).include?(cmd)
  $stderr.puts "Unrecognized command #{cmd}"
  usage
end

case cmd
when 'execute', 'parse'
  options[:parse_only] = true if cmd == 'parse'
  input ||= ARGV.empty? ? $stdin.read : RDF::Util::File.open_file(ARGV.first).read
  run(input, **options)
when 'query'
  endpoint = ARGV.shift
  unless endpoint
    $stderr.puts "Expected SPARQL endpoint URL"
    usage
  end
  input ||= ARGV.empty? ? $stdin.read : RDF::Util::File.open_file(ARGV.first).read
  SPARQL::Client.new(endpoint) do |client|
    res = client.query(input)
    display_results(res, **options)
  end
when 'server'
  if data_file = ARGV.shift
    options[:dataset] = RDF::Repository.load(data_file)
  end
  server(options)
else usage
end
