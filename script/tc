#!/usr/bin/env ruby
require 'rubygems'
require "bundler/setup"
require 'linkeddata'
require 'rspec'
require_relative '../lib/sparql'
require 'sxp'
require 'sparql/extensions'
require 'sparql/algebra/extensions'
require_relative "../spec/spec_helper"
require_relative "../spec/suite_helper"
require_relative "../spec/support/extensions/comparitors"
require_relative "../spec/support/extensions/isomorphic"
require 'getoptlong'
require 'amazing_print'

# Extend RDF::Enumerables with these functions.
class RDF::Repository 
  include RDF::Isomorphic
end

ASSERTOR = "https://greggkellogg.net/foaf#me"
RUN_TIME = Time.now

def earl_preamble(options)
  options[:output].write File.read(File.expand_path("../../etc/doap.ttl", __FILE__))
  options[:output].puts %(
<https://rubygems.org/gems/sparql> doap:release [
  doap:name "sparql-#{SPARQL::VERSION}";
  doap:revision "#{SPARQL::VERSION}";
  doap:created "#{File.mtime(File.expand_path('../../VERSION', __FILE__)).strftime('%Y-%m-%d')}"^^xsd:date;
] .
<> foaf:primaryTopic <https://rubygems/gems/sparql> ;
  dc:issued "#{RUN_TIME.xmlschema}"^^xsd:dateTime ;
  foaf:maker <#{ASSERTOR}> .

<#{ASSERTOR}> a earl:Assertor;
  foaf:title "Implementor" .
)
end

def run_tc(tc, **options)
  options[:msg] ||= {}
  options[:tests] ||= 0
  options[:tests] += 1
  info = nil

  id = tc.attributes['id'].
    sub('http://www.w3.org/2001/sw/DataAccess/tests/', '').
    sub('http://www.w3.org/2009/sparql/docs/tests/', '').
    sub('https://w3c.github.io/rdf-star/tests/', '').
    sub('https://w3c.github.io/sparql-12/tests/', '')
  STDERR.write "run #{id}" unless options[:quiet]

  result = "untested"

  query_string = tc.query_string || tc.action.query_string
  query = SPARQL.parse(query_string,
                      update: tc.type.include?('Update'),
                      base_uri: RDF::URI(tc.action.query_file),
                      logger: options[:logger]) rescue "(error)"

  options[:logger].clear

  if options[:verbose]
    STDERR.puts "\nTestCase: #{tc.inspect}"
    STDERR.puts "\nInput:\n" + query_string
    STDERR.puts "\nSSE:\n" + query.to_sse
    STDERR.puts "\nSSE (optimized):\n" + query.optimize.to_sse if options[:optimize]
    STDERR.puts "\nData:\n" + tc.data_string if tc.respond_to?(:data) && tc.data
    STDERR.puts "\nTest Data:\n" + tc.test_data_string if tc.respond_to?(:test_data_string) && tc.test_data_string
    STDERR.puts "\nExpected:\n" + (
    tc.expected ?
      tc.expected.dump(:trig, standard_prefixes: true) :
    (tc.solutions.is_a?(RDF::Enumerable) ?
      tc.solutions.dump(:trig, standard_prefixes: true) :
      (tc.solutions ? "Vars: #{tc.solutions.variable_names}\n" + tc.solutions.to_sse : '')))
  end

  case tc.name
  when 'Basic - Term 6', 'Basic - Term 7', 'syntax-lit-08.rq'
    info = "Decimal format changed in SPARQL 1.1"
  #when 'syntax-esc-04.rq', 'syntax-esc-05.rq'
  #  info = "PNAME_LN changed in SPARQL 1.1"
  when 'datatype-2 : Literals with a datatype'
    info = "datatype now returns rdf:langString for language-tagged literals"
  when /REDUCED/
    info = "REDUCED equivalent to DISTINCT"
  when 'Strings: Distinct', 'All: Distinct'
    info = "More compact representation"
  when /syntax-update-(26|27|28|36).ru/
    info = "Whitespace in string tokens"
  else
    case tc.name
    when 'date-1', 'expr-5.rq'
      # See https://github.com/w3c/rdf-tests/pull/83#issuecomment-1324220844 for @afs's discussion of the simplified/not-simplified issue.
      info = "Different results on unapproved tests"
    when /pp11|pp31/
      info = "Expects multiple equivalent property path solutions"
    when 'syn-bad-pname-06'
      info = "Raw PNAME validation"
    when /sq03/
      info = "Graph variable binding differences"
    when /tvs02/
      info = "Empty vs. Unbound"
    when 'Negated Property Set with inverse properties',
         'Negated Property Set with both direct and inverse properties'
      info = "new SPARQL tests"
    end

    info = "Entailment" if tc.entailment?
    info = "Federated Query" if Array(tc.feature).include?('sd:BasicFederatedQuery')

    case tc.type
    when 'mf:QueryEvaluationTest'
      actual = sparql_query(graphs: tc.graphs, query: query_string,
                            base_uri: RDF::URI(tc.action.query_file),
                            all_vars: true,
                            form: tc.form, to_hash: false,
                            optimize: options[:optimize],
                            logger: options[:logger])

      if options[:verbose]
        STDERR.puts "\nActual:\n" + (
          actual.is_a?(RDF::Enumerable) ?
            actual.dump(:trig, standard_prefixes: true) :
            "Vars: #{actual.variable_names}\n" + actual.to_sse)
      end

      case tc.form
      when :select, :create, :describe, :construct
        if actual.isomorphic_with?(tc.solutions)
          result = "passed"
        else
          if options[:verbose] && tc.solutions.respond_to?(:-)
            STDERR.puts "Vars: #{tc.solutions.variable_names} vs #{actual.variable_names}" unless
              tc.solutions.variable_names.sort == actual.variable_names.sort
            STDERR.puts "Missing:\n#{(tc.solutions - actual).to_sse}" unless (tc.solutions - actual).empty?
            STDERR.puts "Extra:\n#{(actual - tc.solutions).to_sse}" unless (actual - tc.solutions).empty?
          end
          result = "failed"
        end
      when :ask
        if actual == tc.solutions
          result = "passed"
        else
          result = "failed"
        end
      else
        STDERR.puts "unknown form #{tc.form.inspect}"
      end
    when 'mf:CSVResultFormatTest'
      actual = sparql_query(graphs: tc.graphs,
                            query: query_string,
                            base_uri: RDF::URI(tc.action.query_file),
                            all_vars: true,
                            optimize: options[:optimize],
                            form: tc.form,
                            logger: options[:logger])

      STDERR.puts "Actual: Vars: #{tc.solutions.variable_names}\n#{actual.to_sse}" if options[:verbose]

      simplified_solutions = RDF::Query::Solutions.new
      actual.each do |solution|
        solution = solution.dup
        actual.variable_names.each do |name|
          value = solution[name] ||= RDF::Literal("")
          solution[name] = RDF::Literal(value.to_s) if value.literal? && !value.simple?
        end
        simplified_solutions << solution
      end

      if simplified_solutions.isomorphic_with?(tc.solutions)
        result = "passed"
      else
        if options[:verbose]
          STDERR.puts "Vars: #{tc.solutions.variable_names} vs #{actual.variable_names}" unless
            tc.solutions.variable_names.sort == actual.variable_names.sort
          STDERR.puts "Missing:\n#{(tc.solutions - actual).to_sse}" unless (tc.solutions - actual).empty?
          STDERR.puts "Extra:\n#{(tc.solutions - actual).to_sse}" unless (actual - tc.solutions).empty?
        end
        result = "failed"
      end
    when 'ut:UpdateEvaluationTest', 'mf:UpdateEvaluationTest'
      # Load default and named graphs for result dataset
      expected = RDF::Repository.new do |r|
        tc.result.graphs.each do |info|
          data, format = info[:data], info[:format]
          if data
            RDF::Reader.for(format).new(data, rdfstar: true, **info).each_statement do |st|
              st.graph_name = RDF::URI(info[:base_uri]) if info[:base_uri]
              r << st
            end
          end
        end
      end

      actual = sparql_query(graphs: tc.action.graphs,
                            query: query_string,
                            base_uri: RDF::URI(tc.action.query_file),
                            all_vars: true,
                            optimize: options[:optimize],
                            form: tc.form,
                            logger: options[:logger])

      STDERR.puts "Actual: #{actual.dump(:trig, standard_prefixes: true)}" if options[:verbose]
      if actual.isomorphic_with?(expected)
        result = "passed"
      else
        if options[:verbose] && tc.solutions.respond_to?(:-)
          STDERR.puts "Vars: #{tc.solutions.variable_names} vs #{actual.variable_names}" unless
            tc.solutions.variable_names.sort == actual.variable_names.sort
          STDERR.puts "Missing:\n#{(tc.solutions - actual).to_sse}" unless (tc.solutions - actual).empty?
          STDERR.puts "Extra:\n#{(actual - tc.solutions).to_sse}" unless (actual - tc.solutions).empty?
        end
        result = "failed"
      end
    when 'mf:PositiveSyntaxTest', 'mf:PositiveSyntaxTest11'
      SPARQL.parse(query_string, base_uri: tc.base_uri, validate: true, logger: options[:logger])
      # No exception means it passes
      result = "passed"
    when 'mf:NegativeSyntaxTest', 'mf:NegativeSyntaxTest11'
      begin
        SPARQL.parse(query_string,
                     base_uri: tc.base_uri,
                     all_vars: true,
                     validate: true,
                     logger: options[:logger])
      rescue Exception => e
        result = "passed"
      end
      unless result == "passed"
        result = "failed"
      end
    when 'mf:PositiveUpdateSyntaxTest11'
      SPARQL.parse(query_string, base_uri: tc.base_uri, update: true, validate: true, logger: options[:logger])
      # No exception means it passes
      result = "passed"
    when 'mf:NegativeUpdateSyntaxTest11'
      begin
        SPARQL.parse(query_string, base_uri: tc.base_uri, update: true, validate: true, logger: options[:logger])
      rescue Exception => e
        result = "passed"
      end
      unless result == "passed"
        result = "failed"
      end
    when 'mf:ProtocolTest'
      tc.logger = options[:logger] if options[:verbose]
      result = tc.execute ? "passed" : "failed"
    when 'mf:GraphStoreProtocolTest'
      info = "Graph Store Protocol Test"
    else
      STDERR.puts "unknown test type #{tc.type}"
    end
  end
  STDERR.puts options[:logger].to_s if options[:logger].level <= Logger::INFO
rescue Interrupt
  exit(1)
rescue Exception => e
  result = 'exception'
  unless options[:quiet]
    STDERR.puts("Exception: #{e.message}")
    if options[:verbose]
      STDERR.puts e.backtrace
      STDERR.puts options[:logger].to_s
    else
      STDERR.puts options[:logger].to_s #if options[:logger].level <= Logger::INFO
    end
  end
ensure
  options[:results][result] ||= 0
  options[:results][result] += 1

  if options[:earl]
    options[:output].puts %{
[ a earl:Assertion;
  earl:assertedBy <#{ASSERTOR}>;
  earl:subject <https://rubygems.org/gems/sparql>;
  earl:test <#{tc.attributes['id']}>;
  earl:result [
    a earl:TestResult;
    earl:outcome earl:#{result};#{info ? "\n    earl:info " + info.inspect + ";" : ""}
    dc:name #{RDF::Literal(tc.name).to_base};
    dc:date "#{RUN_TIME.xmlschema}"^^xsd:dateTime];
  earl:mode earl:automatic ] .
}
  end

  if options[:quiet]
    STDERR.write(result == 'passed' ? '.' : result[0,1])
  else
    puts " #{result} #{info}"
  end
end

logger = RDF::Spec.logger
logger.level = Logger::WARN

options = {
  output:   STDOUT,
  quite:    false,
  results: {},
  validate: false,
  verbose:  false,
  logger: logger,
}

OPT_ARGS = [
  ["--debug",           GetoptLong::NO_ARGUMENT, "Debugging output"],
  ["--earl",            GetoptLong::NO_ARGUMENT, "Generate EARL report"],
  ["--help", "-?",      GetoptLong::NO_ARGUMENT, "print this message"],
  ["--info",            GetoptLong::NO_ARGUMENT, "Show progress on execution"],
  ["--optimize",        GetoptLong::NO_ARGUMENT, 'Do query optimization'],
  ["--output", "-o",    GetoptLong::REQUIRED_ARGUMENT, "Output to specified file"],
  ["--quiet", "-q",     GetoptLong::NO_ARGUMENT, "Minimal output"],
  ["--rdfstar",         GetoptLong::NO_ARGUMENT, "Run RDF* tests"],
  ["--sparql11",        GetoptLong::NO_ARGUMENT, "Run SPARQL 1.1 tests"],
  ["--sparql12",        GetoptLong::NO_ARGUMENT, "Run SPARQL 1.2 tests"],
  ["--validate",        GetoptLong::NO_ARGUMENT, "Validate input"],
  ["--verbose", "-v",   GetoptLong::NO_ARGUMENT, "Verbose output"],
  #["--write-manifests", GetoptLong::NO_ARGUMENT, "Write out the parsed manifests for earl reporting"],
]

def usage(**options)
  STDERR.puts %{
    sparql version #{SPARQL::VERSION}
    Run SPARQL tests.
    
    Usage: #{$0} [options] [test-number ...]
  }.gsub(/^    /, '')
  width = OPT_ARGS.map do |o|
    l = o.first.length
    l += o[1].length + 2 if o[1].is_a?(String)
    l
  end.max
  OPT_ARGS.each do |o|
    s = "  %-*s  " % [width, (o[1].is_a?(String) ? "#{o[0,2].join(', ')}" : o[0])]
    s += o.last
    STDERR.puts s
  end
  exit(1)
end

opts = GetoptLong.new(*OPT_ARGS.map {|o| o[0..-2]})

opts.each do |opt, arg|
  case opt
  when '--debug'        then logger.level = Logger::DEBUG
  when '--earl'
    options[:quiet] = options[:earl] = true
    logger.level = Logger::FATAL
  when '--help'         then usage(**options)
  when '--info'         then logger.level = Logger::INFO
  when '--optimize'     then options[:optimize] = true
  when '--output'       then options[:output] = File.open(arg, "w")
  when '--quiet'
    options[:quiet] = true
    logger.level = Logger::FATAL
  when '--rdfstar'      then options[:rdfstar] = true
  when '--sparql12'      then options[:sparql12] = true
  when '--validate'     then options[:validate] = true
  when '--verbose'      then options[:verbose] = true
  end
end

earl_preamble(options) if options[:earl]

manifests = if options[:rdfstar]
  SPARQL::Spec.sparql_star_tests
elsif options[:sparql11]
  [SPARQL::Spec.sparql1_0_syntax_tests, SPARQL::Spec.sparql1_0_tests, SPARQL::Spec.sparql1_1_tests]
elsif options[:sparql12]
  SPARQL::Spec.sparql_12_tests
else
  [
    SPARQL::Spec.sparql1_0_syntax_tests,
    SPARQL::Spec.sparql1_0_tests,
    SPARQL::Spec.sparql1_1_tests,
    SPARQL::Spec.sparql_12_tests,
    SPARQL::Spec.sparql_star_tests,
  ]
end.flatten
manifests.each do |path|
    SPARQL::Spec::Manifest.open(path) do |man|
      puts ["Suite", man.attributes['rdfs:label'], man.attributes['rdfs:comment'], man.comment].compact.join(" - ") if options[:verbose] && ARGV.empty?
      man.entries.each do |tc|
        next unless tc.action || %w(mf:GraphStoreProtocolTest).include?(tc.type)
        name = Array(tc.name).join("") + Array(tc.entry).join("")
        next unless ARGV.empty? || ARGV.any? do |n|
          tc.attributes['id'].include?(n) ||
          tc.action.is_a?(Hash) && tc.action['mq:query'].to_s.include?(n) ||
          name.include?(n)
        end
        run_tc(tc, **options)
      end
    end
  end

STDERR.puts "" if options[:quiet]
options[:results].each {|k, v| puts "#{k}: #{v}"}
