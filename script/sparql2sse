#!/usr/bin/env ruby
require 'rubygems'
require "bundler/setup"
$:.unshift(File.expand_path("../../lib", __FILE__))
require 'logger'
require 'sparql'
require 'getoptlong'
require 'open-uri'
require 'amazing_print'
require 'ruby-prof'

def run(input, parser_options)
  if parser_options[:profile]
    output_dir = File.expand_path("../../doc/profiles/#{File.basename __FILE__, ".rb"}", __FILE__)
    FileUtils.mkdir_p(output_dir)
    profile = RubyProf::Profile.new
    profile.exclude_methods!(Array, :each, :map)
    profile.exclude_method!(Hash, :each)
    profile.exclude_method!(Kernel, :require)
    profile.exclude_method!(Object, :run)
    profile.exclude_common_methods!
    profile.start
    run(input, **parser_options.merge(profile: false))
    result = profile.stop
    
    # Print a graph profile to text
    printer = RubyProf::MultiPrinter.new(result)
    printer.print(path: output_dir, profile: "profile")
    puts "output saved in #{output_dir}"
    return
  end
  start = Time.new
  num = 0
  puts  "#{input.read}\n---\n\n" unless parser_options[:quiet]
  input.rewind
  if parser_options[:quiet]
    $stdout = StringIO.new
  end
  parser = if parser_options[:use11]
    SPARQL::Grammar::Parser11.new(input.read, **parser_options)
  else
    SPARQL::Grammar::Parser.new(input.read, **parser_options)
  end
  res = parser.parse(parser_options[:production])
  res.optimize! if parser_options[:optimize]
  if parser_options[:quiet]
    $stdout = STDOUT
    print "."
  elsif parser_options[:dump]
    puts res.inspect
  elsif parser_options[:to_sparql]
    puts res.to_sparql
  else
    puts res.to_sse
  end
  puts
  secs = Time.new - start
  puts "Parsed in #{secs} seconds."
rescue Exception => e
  if parser_options[:logger].level <= Logger::INFO
    fname = input.respond_to?(:path) ? input.path : "-stdin-"
    $stderr.puts("\nIn #{fname}: #{e.message}")
    raise e
  else
    puts "Parse Error: #{e.message}"
    $stderr.puts(e.backtrace.join("\n"))
    exit(1)
  end
end

$output_format = :ntriples
$input_format = :turtle
input = nil

logger = Logger.new(STDERR)
logger.level = Logger::WARN
logger.formatter = lambda {|severity, datetime, progname, msg| "%5s %s\n" % [severity, msg]}

parser_options = {
  progress:   false,
  production: :QueryUnit,
  profile:    false,
  prefixes:   {},
  logger:     logger,
}

OPT_ARGS = [
  ["--debug", GetoptLong::NO_ARGUMENT,                "Debug output"],
  ["--dump", GetoptLong::NO_ARGUMENT,                 "Dump raw output, otherwise serialize to SSE"],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT,  "Use option argument as the patch input"],
  ["--help", "-?", GetoptLong::NO_ARGUMENT,           "This message"],
  ["--optimize", GetoptLong::NO_ARGUMENT,             "Optimize operands"],
  ["--production", GetoptLong::REQUIRED_ARGUMENT,     "Begin parsing with specific BNF production, defaults to Query"],
  ["--profile", GetoptLong::NO_ARGUMENT,              "Run profiler with output to doc/profiles/"],
  ["--progress", GetoptLong::NO_ARGUMENT,             "Display parser progress when running productions"],
  ["--quiet", GetoptLong::NO_ARGUMENT,                "Reduce output"],
  ["--rdfstar", GetoptLong::NO_ARGUMENT,              "RDF-star mode"],
  ["--resolve-uris", GetoptLong::NO_ARGUMENT,         "Resolve URIs and QNames in output rather than generating (base ...) or (prefix ...)"],
  ["--standard-prefixes", GetoptLong::NO_ARGUMENT,    "Apply standard prefixes to parser (for non-standard productions)"],
  ["--to-sparql", GetoptLong::NO_ARGUMENT,            "Convert back to SPARQL Grammar"],
  ["--uri", GetoptLong::REQUIRED_ARGUMENT,            "Run with argument value as base"],
  ["--use11", GetoptLong::NO_ARGUMENT,                "Use the SPARQL 1.1 version of the parser"],
  ["--validate", GetoptLong::NO_ARGUMENT,             "Validate input"],
]

opts = GetoptLong.new(*OPT_ARGS.map {|o| o[0..-2]})

def usage
  STDERR.puts %{Usage: #{$0} [options] file ...}
  width = OPT_ARGS.map do |o|
    l = o.first.length
    l += o[1].length + 2 if o[1].is_a?(String)
    l
  end.max
  OPT_ARGS.each do |o|
    s = "  %-*s  " % [width, (o[1].is_a?(String) ? "#{o[0,2].join(', ')}" : o[0])]
    s += o.last
    STDERR.puts s
  end
  exit(1)
end

opts.each do |opt, arg|
  case opt
  when '--debug'              then logger.level = Logger::DEBUG
  when '--dump'               then parser_options[:dump] = true
  when '--execute'            then input = arg
  when "--help"               then usage
  when '--optimize'           then parser_options[:optimize] = true
  when '--production'         then parser_options[:production] = arg.to_sym
  when '--profile'            then parser_options[:profile] = true
  when '--progress'           then logger.level = Logger::INFO
  when '--quiet'
    parser_options[:quiet] = true
    logger.level = Logger::FATAL    
  when '--resolve-uris'       then parser_options[:resolve_iris] = true
  when '--standard-prefixes'
    # Use a standard prefixes
    RDF::Vocabulary.each do |v|
      prefix = v.__name__.to_s.split('::').last.downcase.to_sym
      parser_options[:prefixes][prefix] = v.to_uri
    end
  when '--to-sparql'          then parser_options[:to_sparql] = true
  when '--uri'                then parser_options[:base_uri] = arg
  when '--use11'              then parser_options[:use11] = true
  when '--validate'           then parser_options[:validate] = true
  end
end

if ARGV.empty?
  s = input ? input : $stdin.read
  run(StringIO.new(s), parser_options)
else
  ARGV.each do |test_file|
    puts "parse #{test_file}"
    run(Kernel.open(test_file), parser_options)
  end
end
puts